version: '3.7'
services:
  # web:
  #   image: nginx
  #   volumes:
  #     - ./templates:/etc/nginx/templates
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #   ports:
  #     - '8080:80'
  #     - '80:80'
  #     - '9090:80'
  #   environment:
  #     - NGINX_HOST=localhost
  #     - NGINX_PORT=80
  nginx:
    # image: nginx
    build: ./nginx
    volumes:
      - ./templates:/etc/nginx/templates
    #   - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      # - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      # - ./nginx/nginx.conf
    ports:
      - '8080:80'
      - '80:80'
      - '9090:80'
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
  postgres:
    image: postgres:15.1
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    logging:
      options:
        max-size: 10m
        max-file: '3'
    ports:
      - '5432:5432'
    volumes:
      - ./sql/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
      - ./sql/populate_tables.sql:/docker-entrypoint-initdb.d/populate_tables.sql
  mongodb_container:
    image: mongo:latest
    restart: always
    ports:
      - 27017:27017
    volumes:
      - mongodb_data_container:/data/db
  auth-server:
    restart: 'on-failure'
    depends_on:
      - mongodb_container
    build: ./auth-server
    environment:
      - DATABASE_LOCAL=mongodb://mongodb_container
    ports:
      - 4000:4000
  redis-cache:
    restart: always
    image: redis:latest
    ports:
      - 6379:6379
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - cache:/data
  app:
    restart: 'on-failure'
    depends_on:
      - postgres
      - redis-cache
      - auth-server
    build: ./client
    ports:
      - 3000:3000
volumes:
  mongodb_data_container:
  cache:
